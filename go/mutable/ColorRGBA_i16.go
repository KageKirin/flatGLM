// automatically generated by the FlatBuffers compiler, do not modify

package flatmath

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// RGBA color of short components
type ColorRGBA_i16 struct {
	_tab flatbuffers.Struct
}

func (rcv *ColorRGBA_i16) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ColorRGBA_i16) Table() flatbuffers.Table {
	return rcv._tab.Table
}

func (rcv *ColorRGBA_i16) R() int16 {
	return rcv._tab.GetInt16(rcv._tab.Pos + flatbuffers.UOffsetT(0))
}
func (rcv *ColorRGBA_i16) MutateR(n int16) bool {
	return rcv._tab.MutateInt16(rcv._tab.Pos+flatbuffers.UOffsetT(0), n)
}

func (rcv *ColorRGBA_i16) G() int16 {
	return rcv._tab.GetInt16(rcv._tab.Pos + flatbuffers.UOffsetT(2))
}
func (rcv *ColorRGBA_i16) MutateG(n int16) bool {
	return rcv._tab.MutateInt16(rcv._tab.Pos+flatbuffers.UOffsetT(2), n)
}

func (rcv *ColorRGBA_i16) B() int16 {
	return rcv._tab.GetInt16(rcv._tab.Pos + flatbuffers.UOffsetT(4))
}
func (rcv *ColorRGBA_i16) MutateB(n int16) bool {
	return rcv._tab.MutateInt16(rcv._tab.Pos+flatbuffers.UOffsetT(4), n)
}

func (rcv *ColorRGBA_i16) A() int16 {
	return rcv._tab.GetInt16(rcv._tab.Pos + flatbuffers.UOffsetT(6))
}
func (rcv *ColorRGBA_i16) MutateA(n int16) bool {
	return rcv._tab.MutateInt16(rcv._tab.Pos+flatbuffers.UOffsetT(6), n)
}

func CreateColorRGBA_i16(builder *flatbuffers.Builder, r int16, g int16, b int16, a int16) flatbuffers.UOffsetT {
	builder.Prep(2, 8)
	builder.PrependInt16(a)
	builder.PrependInt16(b)
	builder.PrependInt16(g)
	builder.PrependInt16(r)
	return builder.Offset()
}
