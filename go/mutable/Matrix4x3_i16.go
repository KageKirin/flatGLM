// automatically generated by the FlatBuffers compiler, do not modify

package flatmath

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// 4x3 matrix of shorts
type Matrix4x3_i16 struct {
	_tab flatbuffers.Struct
}

func (rcv *Matrix4x3_i16) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Matrix4x3_i16) Table() flatbuffers.Table {
	return rcv._tab.Table
}

func (rcv *Matrix4x3_i16) _0(obj *Vector3_i16) *Vector3_i16 {
	if obj == nil {
		obj = new(Vector3_i16)
	}
	obj.Init(rcv._tab.Bytes, rcv._tab.Pos+0)
	return obj
}
func (rcv *Matrix4x3_i16) _1(obj *Vector3_i16) *Vector3_i16 {
	if obj == nil {
		obj = new(Vector3_i16)
	}
	obj.Init(rcv._tab.Bytes, rcv._tab.Pos+6)
	return obj
}
func (rcv *Matrix4x3_i16) _2(obj *Vector3_i16) *Vector3_i16 {
	if obj == nil {
		obj = new(Vector3_i16)
	}
	obj.Init(rcv._tab.Bytes, rcv._tab.Pos+12)
	return obj
}
func (rcv *Matrix4x3_i16) _3(obj *Vector3_i16) *Vector3_i16 {
	if obj == nil {
		obj = new(Vector3_i16)
	}
	obj.Init(rcv._tab.Bytes, rcv._tab.Pos+18)
	return obj
}

func CreateMatrix4x3_i16(builder *flatbuffers.Builder, _0_x int16, _0_y int16, _0_z int16, _1_x int16, _1_y int16, _1_z int16, _2_x int16, _2_y int16, _2_z int16, _3_x int16, _3_y int16, _3_z int16) flatbuffers.UOffsetT {
	builder.Prep(2, 24)
	builder.Prep(2, 6)
	builder.PrependInt16(_3_z)
	builder.PrependInt16(_3_y)
	builder.PrependInt16(_3_x)
	builder.Prep(2, 6)
	builder.PrependInt16(_2_z)
	builder.PrependInt16(_2_y)
	builder.PrependInt16(_2_x)
	builder.Prep(2, 6)
	builder.PrependInt16(_1_z)
	builder.PrependInt16(_1_y)
	builder.PrependInt16(_1_x)
	builder.Prep(2, 6)
	builder.PrependInt16(_0_z)
	builder.PrependInt16(_0_y)
	builder.PrependInt16(_0_x)
	return builder.Offset()
}
