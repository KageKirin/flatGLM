// automatically generated by the FlatBuffers compiler, do not modify

package flatmath

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

///-----------------------------------------------------------------------------
///-----------------------------------------------------------------------------
/// byte types
/// 2D vector of bytes
type Vector2_i8 struct {
	_tab flatbuffers.Struct
}

func (rcv *Vector2_i8) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Vector2_i8) Table() flatbuffers.Table {
	return rcv._tab.Table
}

func (rcv *Vector2_i8) X() int8 {
	return rcv._tab.GetInt8(rcv._tab.Pos + flatbuffers.UOffsetT(0))
}
func (rcv *Vector2_i8) MutateX(n int8) bool {
	return rcv._tab.MutateInt8(rcv._tab.Pos+flatbuffers.UOffsetT(0), n)
}

func (rcv *Vector2_i8) Y() int8 {
	return rcv._tab.GetInt8(rcv._tab.Pos + flatbuffers.UOffsetT(1))
}
func (rcv *Vector2_i8) MutateY(n int8) bool {
	return rcv._tab.MutateInt8(rcv._tab.Pos+flatbuffers.UOffsetT(1), n)
}

func CreateVector2_i8(builder *flatbuffers.Builder, x int8, y int8) flatbuffers.UOffsetT {
	builder.Prep(1, 2)
	builder.PrependInt8(y)
	builder.PrependInt8(x)
	return builder.Offset()
}
