// automatically generated by the FlatBuffers compiler, do not modify

package flatmath

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

///-----------------------------------------------------------------------------
///-----------------------------------------------------------------------------
/// ubyte types
/// 2D vector of ubytes
type Vector2_u8 struct {
	_tab flatbuffers.Struct
}

func (rcv *Vector2_u8) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Vector2_u8) Table() flatbuffers.Table {
	return rcv._tab.Table
}

func (rcv *Vector2_u8) X() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(0))
}
func (rcv *Vector2_u8) MutateX(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(0), n)
}

func (rcv *Vector2_u8) Y() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(1))
}
func (rcv *Vector2_u8) MutateY(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(1), n)
}

func CreateVector2_u8(builder *flatbuffers.Builder, x byte, y byte) flatbuffers.UOffsetT {
	builder.Prep(1, 2)
	builder.PrependByte(y)
	builder.PrependByte(x)
	return builder.Offset()
}
