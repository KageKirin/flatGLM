// automatically generated by the FlatBuffers compiler, do not modify

package flatmath

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// RGBA color of ubyte components
type ColorRGBA_u8 struct {
	_tab flatbuffers.Struct
}

func (rcv *ColorRGBA_u8) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ColorRGBA_u8) Table() flatbuffers.Table {
	return rcv._tab.Table
}

func (rcv *ColorRGBA_u8) R() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(0))
}
func (rcv *ColorRGBA_u8) MutateR(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(0), n)
}

func (rcv *ColorRGBA_u8) G() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(1))
}
func (rcv *ColorRGBA_u8) MutateG(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(1), n)
}

func (rcv *ColorRGBA_u8) B() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(2))
}
func (rcv *ColorRGBA_u8) MutateB(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(2), n)
}

func (rcv *ColorRGBA_u8) A() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(3))
}
func (rcv *ColorRGBA_u8) MutateA(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(3), n)
}

func CreateColorRGBA_u8(builder *flatbuffers.Builder, r byte, g byte, b byte, a byte) flatbuffers.UOffsetT {
	builder.Prep(1, 4)
	builder.PrependByte(a)
	builder.PrependByte(b)
	builder.PrependByte(g)
	builder.PrependByte(r)
	return builder.Offset()
}
