// automatically generated by the FlatBuffers compiler, do not modify

package flatmath

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// RGBA color of double components
type ColorRGBA_f64 struct {
	_tab flatbuffers.Struct
}

func (rcv *ColorRGBA_f64) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ColorRGBA_f64) Table() flatbuffers.Table {
	return rcv._tab.Table
}

func (rcv *ColorRGBA_f64) R() float64 {
	return rcv._tab.GetFloat64(rcv._tab.Pos + flatbuffers.UOffsetT(0))
}
func (rcv *ColorRGBA_f64) MutateR(n float64) bool {
	return rcv._tab.MutateFloat64(rcv._tab.Pos+flatbuffers.UOffsetT(0), n)
}

func (rcv *ColorRGBA_f64) G() float64 {
	return rcv._tab.GetFloat64(rcv._tab.Pos + flatbuffers.UOffsetT(8))
}
func (rcv *ColorRGBA_f64) MutateG(n float64) bool {
	return rcv._tab.MutateFloat64(rcv._tab.Pos+flatbuffers.UOffsetT(8), n)
}

func (rcv *ColorRGBA_f64) B() float64 {
	return rcv._tab.GetFloat64(rcv._tab.Pos + flatbuffers.UOffsetT(16))
}
func (rcv *ColorRGBA_f64) MutateB(n float64) bool {
	return rcv._tab.MutateFloat64(rcv._tab.Pos+flatbuffers.UOffsetT(16), n)
}

func (rcv *ColorRGBA_f64) A() float64 {
	return rcv._tab.GetFloat64(rcv._tab.Pos + flatbuffers.UOffsetT(24))
}
func (rcv *ColorRGBA_f64) MutateA(n float64) bool {
	return rcv._tab.MutateFloat64(rcv._tab.Pos+flatbuffers.UOffsetT(24), n)
}

func CreateColorRGBA_f64(builder *flatbuffers.Builder, r float64, g float64, b float64, a float64) flatbuffers.UOffsetT {
	builder.Prep(8, 32)
	builder.PrependFloat64(a)
	builder.PrependFloat64(b)
	builder.PrependFloat64(g)
	builder.PrependFloat64(r)
	return builder.Offset()
}
